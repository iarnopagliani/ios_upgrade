---
- name: "ROUTER >> Get Facts NGKIT Config"
  hosts: R1
  gather_facts: False
  tasks:
    
    # Retry date time so I can it as a prefix in creation of a file with router fact
    - name: "SYS >> Get ansible date/time facts"
      setup:
        filter: "ansible_date_time"
        gather_subset: "!all"
    
    - name: "SYS >> Store DTG as fact"
      set_fact:
        DTG: "{{ ansible_date_time.date }}"  # "ansible_date_time": { "date": "2020-01-07"}
    
    - name: "SYS >> Gathering Facts..."
      ios_facts:
        gather_subset:
          #- hardware
          - "!config"
      register: "RTR_FACTS"
    
    # Print Fract for testing when debug id set to True
    - name: "SYS >> Printing facs...."
      debug:
        #msg: "{{ ansible_net_version }} vs {{ GOLD_IOS_VER }}"
        #ansible_net_model == C1111-4PLTEEA
        msg: "{{ RTR_FACTS }}"
      when: debug

    # Save fat in file like: 2020-04-01_R1_facts.cfg
    - name: "SYS >> Save Facts in file"
      copy:
        content="{{ RTR_FACTS | to_nice_json }}"
        dest="config/{{ DTG }}_{{ inventory_hostname }}_facts.cfg"
   
    - name: "SYS >> Assert that the IOS needs upgrade"
      assert:
        that:
          - ios_gold_ver == ansible_net_version
        success_msg: "Firmware does not requires upgrade. GOOD..."
        fail_msg: "Firmware requires upgrade. STARTING..."

    #Block updating ios in csase is not equal to the gold image
    - name: "BLOCK >> UPGRADE IOS IMAGE IF NOT COMPLIANT"
      block:
      - name: "NET >> Enable SCP"
        ios_config:
          commands: "ip scp server enable"
        
      - name: "NET >> SCP Copy {{ ios_gold_file }} to Router {{ ansible_net_model }}"
        net_put:
          src: "{{ ios_path }}{{ ios_gold_file }}"
          dest : "{{ ios_gold_file }}"
        when: upload # Usefull to optimizing other task, just for troubleshooting
      
      - name: "SYS >> Check MD5 "
        ios_command:
          commands: verify /md5 bootflash:{{ ios_gold_file }} {{ ios_md5 }}
        register: IOS_VERIFY
      
      - name: "SYS >> Assert that the IOS checksum is Ok"
        assert:
          that:
            - IOS_VERIFY.stdout[0].split('=')[1].lstrip() == ios_md5
          success_msg: "Checksum is OK. GOOD..."
          fail_msg: "Firmware Checksum Problem, Please verify..."
      
      - name: "NET >> Set New IOS and reboot Task  for {{ ansible_net_model }}"
        ios_config:
          commands:
          - "no boot system"
          - "boot system bootflash:{{ ios_gold_file }}"
          - "no ip scp server enable"
          match: none
          save_when: always

      - name: "NET >> Reboot Router !!!"
        ios_command:
          commands:
            - command: "reload"
              prompt: '[confirm]'
              answer: "\r"
        when: reboot # Usefull to optimizing other task, just for troubleshooting
    #We need to make sure the current connection to the network device is closed so that the socket can be reestablished 
    #to the network device after the reboot takes place.  If the connection is not closed and the command timeout is longer 
    #than the time it takes to reboot, the persistent connection will attempt to reuse the closed SSH connection resulting in the failure 
    #“Socket is closed”. A correct Ansible Playbook looks like this:
      - name: "SYS >>reset the connection"
        meta: reset_connection
      
      - name: "SYS >> Wait for router to return"
        wait_for:
          host: "{{ ansible_host }}"
          port: 22
          delay: 60
        retries: 3
        delay: 60
        delegate_to: localhost

    #when: RTR_FACTS.ansible_facts.ansible_net_version != ios_gold_file
    - name: "SYS >> Gathering Facts..."
      ios_facts:
        gather_subset:
          - "!config"

    - name: "SYS >> Assert that the IOS not needs upgrade"
      assert:
        that:
          - ios_gold_ver == ansible_net_version
        success_msg: "Firmware successful upgraded. GOOD..."
        fail_msg: "Problem with the firmware upgrade."
    